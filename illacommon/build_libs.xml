<?xml version="1.0" encoding="utf-8"?><!--
  ~ This file is part of the Illarion Common Library.
  ~
  ~ Copyright Â© 2012 - Illarion e.V.
  ~
  ~ The Illarion Common Library is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ The Illarion Common Library is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with the Illarion Common Library.  If not, see <http://www.gnu.org/licenses/>.
  -->
<project name="Illarion Dependency Libraries" basedir=".">
    <description>
        Build the libraries the Illarion applications depend on.
    </description>

    <dirname property="illacommon.dir" file="${ant.file.Illarion Dependency Libraries}"/>
    <import file="${illacommon.dir}/build_include.xml"/>

    <property name="native" location="${common}/native"/>
    <property name="resources" location="${common}/rsc"/>
    <property name="signedresources" location="${common}/rsc/sign"/>
    <property name="libs" location="${common}/lib"/>
    <property name="signedlibs" location="${common}/lib/signed"/>

    <target name="prepare_all" description="Build all libraries again as needed."
            depends="init_libs,check_libs_compiled_uptodate"
            unless="libs.compiled.uptodate">

        <copy file="${common}/libs-all.zip" tofile="${common}/libs-all-compiled.zip" failonerror="no"
              preservelastmodified="on"/>

        <antcall target="prepare_eventbus"/>
        <antcall target="prepare_javolution"/>
        <antcall target="prepare_jsyntaxpane"/>
        <antcall target="prepare_jgraph"/>
        <antcall target="prepare_log4j"/>
        <antcall target="prepare_lwjgl"/>
        <antcall target="prepare_nifty"/>
        <antcall target="prepare_slick"/>
        <antcall target="prepare_substance"/>
        <antcall target="prepare_trident"/>
        <antcall target="prepare_swingx"/>
        <antcall target="prepare_flamingo"/>
        <antcall target="prepare_substance_swingx"/>
        <antcall target="prepare_substance_flamingo"/>
        <antcall target="prepare_tabsplitter"/>
        <antcall target="prepare_trove"/>
        <antcall target="prepare_vorbisspi"/>
        <antcall target="prepare_xpp3"/>
    </target>

    <target name="prepare_eventbus" description="prepare the EVENTBUS bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="eventbus"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="eventbus.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="eventbus.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/eventbus.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="eventbus.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_javolution" description="prepare the JAVOLUTION bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="javolution"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="javolution.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="javolution.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/javolution.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="javolution.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_jsyntaxpane" description="prepare the JSYNTAXPANE bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="jsyntaxpane"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="jsyntaxpane.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="jsyntaxpane.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/jsyntaxpane.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="jsyntaxpane.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_jgraph" description="prepare the JGraph bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="jgraph"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="jgraph.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="jgraph.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/jgraph.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="jgraph.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_log4j" description="prepare the LOG4J bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="log4j"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="log4j.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="log4j.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/log4j.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="log4j.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_lwjgl" description="prepare the LWJGL bundle"
            depends="check_optional_dirs,init_libs,buildTasks,native_build_pattern" if="keys.exist">
        <jar jarfile="${common}/lwjgl-natives-windows-i586.jar">
            <fileset dir="${native}/win32">
                <include name="lwjgl.dll"/>
                <include name="OpenAL32.dll"/>
                <include name="jinput-dx8.dll"/>
                <include name="jinput-raw.dll"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="LWJGL Team"/>
                <attribute name="Implementation-Title" value="LWJGL Natives Windows 32bit"/>
                <attribute name="Implementation-Version" value="2.8.3"/>
            </manifest>
        </jar>

        <jar jarfile="${common}/lwjgl-natives-windows-amd64.jar">
            <fileset dir="${native}/win64">
                <include name="lwjgl64.dll"/>
                <include name="OpenAL64.dll"/>
                <include name="jinput-dx8_64.dll"/>
                <include name="jinput-raw_64.dll"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="LWJGL Team"/>
                <attribute name="Implementation-Title" value="LWJGL Natives Windows 64bit"/>
                <attribute name="Implementation-Version" value="2.8.3"/>
            </manifest>
        </jar>

        <jar jarfile="${common}/lwjgl-natives-linux-i586.jar">
            <fileset dir="${native}/linux32">
                <include name="liblwjgl.so"/>
                <include name="libopenal.so"/>
                <include name="libjinput-linux.so"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="LWJGL Team"/>
                <attribute name="Implementation-Title" value="LWJGL Natives Linux 32bit"/>
                <attribute name="Implementation-Version" value="2.8.3"/>
            </manifest>
        </jar>

        <jar jarfile="${common}/lwjgl-natives-linux-amd64.jar">
            <fileset dir="${native}/linux64">
                <include name="liblwjgl64.so"/>
                <include name="libopenal64.so"/>
                <include name="libjinput-linux64.so"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="LWJGL Team"/>
                <attribute name="Implementation-Title" value="LWJGL Natives Linux 64bit"/>
                <attribute name="Implementation-Version" value="2.8.3"/>
            </manifest>
        </jar>

        <jar jarfile="${common}/lwjgl-natives-macosx-universal.jar">
            <fileset dir="${native}/macosx">
                <include name="liblwjgl.jnilib"/>
                <include name="openal.jnilib"/>
                <include name="libjinput-osx.so"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="LWJGL Team"/>
                <attribute name="Implementation-Title" value="LWJGL Natives MacOS X"/>
                <attribute name="Implementation-Version" value="2.8.3"/>
            </manifest>
        </jar>

        <jar jarfile="${common}/lwjgl-natives-solaris-i586.jar">
            <fileset dir="${native}/solaris32">
                <include name="liblwjgl.so"/>
                <include name="libopenal.so"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="LWJGL Team"/>
                <attribute name="Implementation-Title" value="LWJGL Natives Solaris 32bit"/>
                <attribute name="Implementation-Version" value="2.8.3"/>
            </manifest>
        </jar>

        <jar jarfile="${common}/lwjgl-natives-solaris-amd64.jar">
            <fileset dir="${native}/solaris64">
                <include name="liblwjgl64.so"/>
                <include name="libopenal64.so"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Implementation-Vendor" value="LWJGL Team"/>
                <attribute name="Implementation-Title" value="LWJGL Natives Solaris 64bit"/>
                <attribute name="Implementation-Version" value="2.8.3"/>
            </manifest>
        </jar>

        <patternset id="lwjgl.natives">
            <include name="lwjgl-natives-*.jar"/>
        </patternset>

        <move todir="${lwjgl.dir}">
            <fileset dir="${common}">
                <patternset refid="lwjgl.natives"/>
            </fileset>
        </move>

        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="lwjgl"/>
            <fileset dir="${lwjgl.dir}">
                <patternset refid="lwjgl.natives"/>
            </fileset>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="lwjgl.pattern"/>
                </fileset>
                <fileset dir="${signedlibs}">
                    <patternset refid="lwjgl.natives"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="lwjgl.pattern"/>
                </fileset>
                <fileset dir="${signedlibs}">
                    <patternset refid="lwjgl.natives"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/lwjgl-windows-i586.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="lwjgl.pattern"/>
                <patternset refid="only.windows.32"/>
            </fileset>
            <nativefileset dir="${signedlibs}">
                <patternset refid="lwjgl.natives"/>
                <patternset refid="only.windows.32"/>
            </nativefileset>
        </resourcebuild>

        <resourcebuild target="${setuplib}/lwjgl-windows-amd64.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="lwjgl.pattern"/>
                <patternset refid="only.windows.64"/>
            </fileset>
            <nativefileset dir="${signedlibs}">
                <patternset refid="lwjgl.natives"/>
                <patternset refid="only.windows.64"/>
            </nativefileset>
        </resourcebuild>

        <resourcebuild target="${setuplib}/lwjgl-linux-i586.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="lwjgl.pattern"/>
                <patternset refid="only.linux.32"/>
            </fileset>
            <nativefileset dir="${signedlibs}">
                <patternset refid="lwjgl.natives"/>
                <patternset refid="only.linux.32"/>
            </nativefileset>
        </resourcebuild>

        <resourcebuild target="${setuplib}/lwjgl-linux-amd64.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="lwjgl.pattern"/>
                <patternset refid="only.linux.64"/>
            </fileset>
            <nativefileset dir="${signedlibs}">
                <patternset refid="lwjgl.natives"/>
                <patternset refid="only.linux.64"/>
            </nativefileset>
        </resourcebuild>

        <resourcebuild target="${setuplib}/lwjgl-macosx-universal.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="lwjgl.pattern"/>
                <patternset refid="only.macosx"/>
            </fileset>
            <nativefileset dir="${signedlibs}">
                <patternset refid="lwjgl.natives"/>
                <patternset refid="only.macosx"/>
            </nativefileset>
        </resourcebuild>

        <resourcebuild target="${setuplib}/lwjgl-solaris-i586.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="lwjgl.pattern"/>
                <patternset refid="only.sunos.32"/>
            </fileset>
            <nativefileset dir="${signedlibs}">
                <patternset refid="lwjgl.natives"/>
                <patternset refid="only.sunos.32"/>
            </nativefileset>
        </resourcebuild>

        <resourcebuild target="${setuplib}/lwjgl-solaris-amd64.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="lwjgl.pattern"/>
                <patternset refid="only.sunos.64"/>
            </fileset>
            <nativefileset dir="${signedlibs}">
                <patternset refid="lwjgl.natives"/>
                <patternset refid="only.sunos.64"/>
            </nativefileset>
        </resourcebuild>
    </target>

    <target name="prepare_nifty" description="prepare the NIFTY-GUI bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="nifty"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="nifty.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="nifty.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/nifty.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="nifty.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_slick" description="prepare the SLICK bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="slick"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="slick.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="slick.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/slick.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="slick.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_substance" description="prepare the SUBSTANCE bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <property name="use.pack200" value="true"/>

        <resourceprepare targetdir="${signedlibs}" usepack200="${use.pack200}">
            <fileset refid="substance"/>
            <fileset refid="laf"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="substance.pattern"/>
                    <patternset refid="laf.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="substance.pattern"/>
                    <patternset refid="laf.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/substance.illares" usepack200="${use.pack200}">
            <fileset dir="${signedlibs}">
                <patternset refid="substance.pattern"/>
                <patternset refid="laf.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_trident" description="prepare the TRIDENT bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <property name="use.pack200" value="true"/>

        <resourceprepare targetdir="${signedlibs}" usepack200="${use.pack200}">
            <fileset refid="trident"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="trident.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="trident.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/trident.illares" usepack200="${use.pack200}">
            <fileset dir="${signedlibs}">
                <patternset refid="trident.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_swingx" description="prepare the SWINGX bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <property name="use.pack200" value="true"/>

        <resourceprepare targetdir="${signedlibs}" usepack200="${use.pack200}">
            <fileset refid="swingx"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="swingx.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="swingx.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/swingx.illares" usepack200="${use.pack200}">
            <fileset dir="${signedlibs}">
                <patternset refid="swingx.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_flamingo" description="prepare the SUBSTANCE bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <property name="use.pack200" value="true"/>

        <resourceprepare targetdir="${signedlibs}" usepack200="${use.pack200}">
            <fileset refid="flamingo"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="flamingo.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="flamingo.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/flamingo.illares" usepack200="${use.pack200}">
            <fileset dir="${signedlibs}">
                <patternset refid="flamingo.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_substance_swingx" description="prepare the SUBSTANCE-SWINGX bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <property name="use.pack200" value="true"/>

        <resourceprepare targetdir="${signedlibs}" usepack200="${use.pack200}">
            <fileset refid="substance-swingx"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="substance-swingx.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="substance-swingx.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/substance-swingx.illares" usepack200="${use.pack200}">
            <fileset dir="${signedlibs}">
                <patternset refid="substance-swingx.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_substance_flamingo" description="prepare the SUBSTANCE-FLAMINGO bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <property name="use.pack200" value="true"/>

        <resourceprepare targetdir="${signedlibs}" usepack200="${use.pack200}">
            <fileset refid="substance-flamingo"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="substance-flamingo.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="substance-flamingo.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/substance-flamingo.illares" usepack200="${use.pack200}">
            <fileset dir="${signedlibs}">
                <patternset refid="substance-flamingo.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_tabsplitter" description="prepare the TABSPLITTER bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="tabsplitter"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="tabsplitter.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="tabsplitter.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/tabsplitter.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="tabsplitter.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_trove" description="prepare the TROVE bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="trove"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="trove.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="trove.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/trove.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="trove.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_vorbisspi" description="prepare the VORBISSPI bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="vorbisspi"/>
            <fileset refid="jorbis"/>
            <fileset refid="tritonus"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="vorbisspi.pattern"/>
                    <patternset refid="jorbis.pattern"/>
                    <patternset refid="tritonus.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="vorbisspi.pattern"/>
                    <patternset refid="jorbis.pattern"/>
                    <patternset refid="tritonus.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/vorbisspi.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="vorbisspi.pattern"/>
                <patternset refid="jorbis.pattern"/>
                <patternset refid="tritonus.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="prepare_xpp3" description="prepare the XPP3 bundle"
            depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist">
        <resourceprepare targetdir="${signedlibs}" usepack200="true">
            <fileset refid="xpp"/>
        </resourceprepare>

        <signjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" destDir="${signedlibs}"
                 storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="xpp.pattern"/>
                </fileset>
            </path>
        </signjar>

        <verifyjar alias="${storealias}" storepass="${storepass}" keystore="${keystore}" certificates="yes" verbose="no"
                   storetype="${storetype}">
            <path>
                <fileset dir="${signedlibs}">
                    <patternset refid="xpp.pattern"/>
                </fileset>
            </path>
        </verifyjar>

        <resourcebuild target="${setuplib}/xpp3.illares" usepack200="true">
            <fileset dir="${signedlibs}">
                <patternset refid="xpp.pattern"/>
            </fileset>
        </resourcebuild>
    </target>

    <target name="init_libs" depends="download_libraries,check_libs_uptodate">
        <mkdir dir="${setuplib}"/>
        <mkdir dir="${signedlibs}"/>
        <mkdir dir="${signedresources}"/>
    </target>

    <target name="download_libraries" description="download and setup all the libraries needed">
        <copy file="${common}/libs-all.zip" tofile="${common}/libs-all-old.zip" failonerror="no"
              preservelastmodified="on"/>
        <get dest="${common}/libs-all.zip" src="http://illarion.org/media/java/libs-all.zip" verbose="false"
             usetimestamp="true" ignoreerrors="true"/>
        <antcall target="extract_libs"/>
    </target>

    <target name="check_libs_uptodate">
        <uptodate property="libs.uptodate" srcfile="${common}/libs-all.zip" targetfile="${common}/libs-all-old.zip"/>
    </target>

    <target name="check_libs_compiled_uptodate">
        <uptodate property="libs.compiled.uptodate" srcfile="${common}/libs-all.zip"
                  targetfile="${common}/libs-all-compiled.zip"/>
    </target>

    <target name="extract_libs" depends="check_libs_uptodate" unless="libs.uptodate">
        <delete dir="${signedlibs}" failonerror="false"/>
        <delete dir="${libs}" failonerror="false"/>
        <mkdir dir="${libs}"/>
        <unzip dest="${libs}" src="${common}/libs-all.zip" overwrite="true"/>
        <antcall target="extract_natives"/>
    </target>

    <target name="extract_natives">
        <mkdir dir="${native}"/>
        <mkdir dir="${native}/linux32"/>
        <mkdir dir="${native}/linux64"/>
        <mkdir dir="${native}/macosx"/>
        <mkdir dir="${native}/solaris32"/>
        <mkdir dir="${native}/solaris64"/>
        <mkdir dir="${native}/win32"/>
        <mkdir dir="${native}/win64"/>

        <unjar dest="${native}/linux32" overwrite="true">
            <patternset>
                <exclude name="META-INF/"/>
            </patternset>
            <fileset dir="${common}/lib">
                <exclude name="signed/"/>
                <include name="**/*-linux-i586.jar"/>
            </fileset>
        </unjar>

        <unjar dest="${native}/linux64" overwrite="true">
            <patternset>
                <exclude name="META-INF/"/>
            </patternset>
            <fileset dir="${common}/lib">
                <exclude name="signed/"/>
                <include name="**/*-linux-amd64.jar"/>
            </fileset>
        </unjar>

        <unjar dest="${native}/macosx" overwrite="true">
            <patternset>
                <exclude name="META-INF/"/>
            </patternset>
            <fileset dir="${common}/lib">
                <exclude name="signed/"/>
                <include name="**/*-macosx-universal.jar"/>
            </fileset>
        </unjar>

        <unjar dest="${native}/solaris32" overwrite="true">
            <patternset>
                <exclude name="META-INF/"/>
            </patternset>
            <fileset dir="${common}/lib">
                <exclude name="signed/"/>
                <include name="**/*-solaris-i586.jar"/>
            </fileset>
        </unjar>

        <unjar dest="${native}/solaris64" overwrite="true">
            <patternset>
                <exclude name="META-INF/"/>
            </patternset>
            <fileset dir="${common}/lib">
                <exclude name="signed/"/>
                <include name="**/*-solaris-amd64.jar"/>
            </fileset>
        </unjar>

        <unjar dest="${native}/win32" overwrite="true">
            <patternset>
                <exclude name="META-INF/"/>
            </patternset>
            <fileset dir="${common}/lib">
                <exclude name="signed/"/>
                <include name="**/*-windows-i586.jar"/>
            </fileset>
        </unjar>

        <unjar dest="${native}/win64" overwrite="true">
            <patternset>
                <exclude name="META-INF/"/>
            </patternset>
            <fileset dir="${common}/lib">
                <exclude name="signed/"/>
                <include name="**/*-windows-amd64.jar"/>
            </fileset>
        </unjar>
    </target>

    <target name="create_library_bundle" description="Create the library ZIP-File that is downloaded during the build">
        <delete file="${common}/libs-all.zip" failonerror="false"/>
        <zip destfile="${common}/libs-all.zip" update="false" compress="true">
            <fileset dir="${libs}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
                <include name="**/*.txt"/>
                <exclude name="signed/**"/>
            </fileset>
        </zip>
    </target>

    <target name="download_everything" depends="rsc_download,rsc_manual,download_libraries"/>

    <target name="rsc_download" description="Download the resources">
        <get src="http://illarion.org/media/java/rsc/rsc_books.jar" dest="${resources}/rsc_books.jar"
             usetimestamp="true" verbose="true"/>
        <get src="http://illarion.org/media/java/rsc/rsc_chars.jar" dest="${resources}/rsc_chars.jar"
             usetimestamp="true" verbose="true"/>
        <get src="http://illarion.org/media/java/rsc/rsc_effects.jar" dest="${resources}/rsc_effects.jar"
             usetimestamp="true" verbose="true"/>
        <get src="http://illarion.org/media/java/rsc/rsc_gui.jar" dest="${resources}/rsc_gui.jar" usetimestamp="true"
             verbose="true"/>
        <get src="http://illarion.org/media/java/rsc/rsc_items.jar" dest="${resources}/rsc_items.jar"
             usetimestamp="true" verbose="true"/>
        <get src="http://illarion.org/media/java/rsc/rsc_sounds.jar" dest="${resources}/rsc_sounds.jar"
             usetimestamp="true" verbose="true"/>
        <get src="http://illarion.org/media/java/rsc/rsc_tables.jar" dest="${resources}/rsc_tables.jar"
             usetimestamp="true" verbose="true"/>
        <get src="http://illarion.org/media/java/rsc/rsc_tiles.jar" dest="${resources}/rsc_tiles.jar"
             usetimestamp="true" verbose="true"/>
    </target>

    <target name="rsc_manual" depends="check_optional_dirs,init_libs,register_extensions" if="keys.exist"
            description="Build the Manual resources">
        <filelist dir="${client}" id="manuals">
            <file name="manual_de.pdf"/>
            <file name="manual_en.pdf"/>
        </filelist>

        <copy todir="${resources}">
            <filelist refid="manuals"/>
        </copy>
    </target>
</project>