/*
 * This file is part of the Illarion project.
 *
 * Copyright Â© 2015 - Illarion e.V.
 *
 * Illarion is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Illarion is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
import com.install4j.gradle.Install4jTask

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply from: '../javafx.plugin'
apply from: '../versions.gradle'
apply plugin: 'install4j'

def hasTargetDistDir = project.hasProperty('targetDistDir')
def hasInstall4jDir = project.hasProperty('install4jDir')
def hasInstall4jTargetDir = project.hasProperty('install4jTargetDir')

archivesBaseName = 'illarion_download'
mainClassName = 'illarion.download.Application'

dependencies {
    compile project(':common')
    compile group: 'org.slf4j', name: 'slf4j-api', version: project.ext.slf4jVersion
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: project.ext.slf4jVersion
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: project.ext.slf4jVersion
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: project.ext.slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: project.ext.logbackVersion
    compile group: 'xpp3', name: 'xpp3', version: '1.1.4c'
    compile group: 'org.bushe', name: 'eventbus', version: '1.4'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.eclipse.aether', name: 'aether-api', version: '1.1.0'
    compile group: 'org.eclipse.aether', name: 'aether-connector-basic', version: '1.1.0'
    compile group: 'org.eclipse.aether', name: 'aether-transport-http', version: '1.1.0'
    compile group: 'org.apache.maven', name: 'maven-aether-provider', version: '3.3.9'
}

jar {
    dependsOn { gitVersion }
    manifest {
        attributes \
                 'Main-Class': 'illarion.download.gui.GuiApplication', \
                 'JavaFX-Feature-Proxy': 'None', \
                 'Permissions': 'all-permissions', \
                 'Codebase': 'illarion.org', \
                 'Application-Name': 'Illarion Launcher', \
                 'Application-Library-Allowable-Codebase': 'illarion.org', \
                 'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ssZ'), \
                 'Built-By': System.getProperty('user.name'), \
                 'Built-JDK': System.getProperty('java.version'), \
                 'Implementation-Title': 'Illarion Launcher', \
                 'Implementation-Vendor': 'Illarion e.V.',\
                  'Implementation-Version': project.ext.fullVersion
    }
}

task publishDownloaderBundle() {}

if (hasTargetDistDir) {
    publish.dependsOn {
        publishDownloader
    }
}
if (hasInstall4jTargetDir) {
    publishDownloaderBundle.dependsOn {
        createInstall4j
    }
}

startScripts.dependsOn {
    jfxJar
}

javafx {
    id 'IllaLauncher'
    appID 'IllaLauncher'
    appName 'Illarion-Launcher'
    mainClass project.mainClassName

    embedLauncher = true

    category = 'Games'
    copyright = 'Copyright (c) 2013 Illarion e.V.'
    description = 'This is the downloader and launcher of Illarion.'
    licenseType = 'AGPLv3'
    vendor = 'Illarion e.V.'
    installSystemWide = false
    menu = true
    shortcut = true

    if (project.hasProperty('keyFile')) {
        apply from: project.keyFile
        releaseKey {
            alias = project.ext.storealias
            keyStore = project.ext.keystore
            storePass = project.ext.storepass
            storeType = project.ext.storetype
        }
        signingMode 'release'
    }
    packaging 'none'

    profiles {
        windows {
            javaRuntime = '<NO RUNTIME>'
        }
        macosx {
            javaRuntime = '<NO RUNTIME>'
        }
        linux {
            javaRuntime = '<NO RUNTIME>'
        }
    }

    width = 620
    height = 410
    embedJNLP = true
    codebase = 'http://illarion.org/media/java/launcher'
}

if (hasTargetDistDir) {
    task clearDistDir(type: Delete) {
        delete project.distsDir
    }
    jfxDeploy {
        doFirst {
            clearDistDir
        }
    }
    task publishDownloader(type: Copy, dependsOn: 'jfxDeploy') {
        from project.distsDir
        into file(project.targetDistDir)
    }
}
if (hasInstall4jTargetDir && hasInstall4jDir) {
    task cleanUpForInstall4j(type: Delete) {
        delete new File(project.buildDir, 'install4j')
    }
    task createInstall4jDirectory(dependsOn: cleanUpForInstall4j) {
        def sourceDir = new File(project.buildDir, 'install4j')
        sourceDir.mkdirs()
    }
    task assembleForInstall4j(type: Copy) {
        dependsOn jfxJar, createInstall4jDirectory

        from new File(project.buildDir, "libs/${project.archivesBaseName}-${project.version}.jar")
        configurations.runtime.each { File file ->
            if (!file.absolutePath.startsWith(System.getProperty('java.home'))) {
                from file
            }
        }
        into new File(project.buildDir, 'install4j')
    }

    if (project.hasProperty('keyFile')) {
        apply from: project.keyFile
    }

    install4j {
        installDir = file(project.install4jDir)
        faster = false
        if (project.hasProperty('keyFile')) {
            disableSigning = false
            winKeystorePassword = project.ext.storepass
            macKeystorePassword = project.ext.storepass
        } else {
            disableSigning = true
        }
    }

    task createInstall4j(type: Install4jTask) {
        dependsOn 'assembleForInstall4j'

        def sourceDir = new File(project.buildDir, 'install4j')

        inputs.dir sourceDir
        inputs.file new File(project.projectDir, 'installer.install4j')
        outputs.dir project.install4jTargetDir

        def keyStore = null
        if (project.hasProperty('keyFile')) {
            keyStore = project.ext.keystore
        }

        projectFile = new File(project.projectDir, 'installer.install4j')
        destination = file(project.install4jTargetDir)

        def releaseVersion = project.version.toString().replace('-SNAPSHOT', '')
        if (project.hasProperty('setupVersion')) {
            releaseVersion = project.setupVersion
        }
        release = releaseVersion

        variables = [sourceDir: sourceDir,
                     iconsDir : new File(project.projectDir, 'icons'),
                     keyStore : keyStore]
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url project.ext.mavenRepo
        }
    }
}
