/*
 * This file is part of the Illarion Client.
 *
 * Copyright Â© 2013 - Illarion e.V.
 *
 * The Illarion Client is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Illarion Client is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Illarion Client.  If not, see <http://www.gnu.org/licenses/>.
 */
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply from: '../javafx.plugin'
apply from: '../versions.gradle'

if (project.hasProperty('targetDistDir')) {
    // Launch4j requires a native installment. Has to remain disabled until the server contains this
    //apply plugin: 'launch4j'

    // The MacOS bundle plugin is broken to the point where its not usable at all. Its impossible to set the input
    // files as this plugin receives the from the jar task directly. And those requirements are resolved wrong due
    // the usage of JavaFX.
    //apply plugin: 'macAppBundle'
}

archivesBaseName = 'illarion_download'
mainClassName = 'illarion.download.gui.GuiApplication'

dependencies {
    compile project(':common')
    compile group: 'org.javolution', name: 'javolution-core-java', version: '6.0.0'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: project.ext.slf4jVersion
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: project.ext.slf4jVersion
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: project.ext.slf4jVersion
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: project.ext.slf4jVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'
    compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    compile group: 'xpp3', name: 'xpp3', version: '1.1.4c'
    compile group: 'org.bushe', name: 'eventbus', version: '1.4'
    compile group: 'org.eclipse.aether', name: 'aether-impl', version: '0.9.0.v20140226'
    compile group: 'org.eclipse.aether', name: 'aether-transport-http', version: '0.9.0.v20140226'
    compile group: 'org.eclipse.aether', name: 'aether-connector-basic', version: '0.9.0.v20140226'
    compile group: 'org.apache.maven', name: 'maven-aether-provider', version: '3.2.1'
}

jar {
    dependsOn { gitVersion }
    manifest {
        attributes      \
             'Main-Class': 'illarion.download.gui.GuiApplication',     \
             'Permissions': 'all-permissions',     \
             'Codebase': 'illarion.org',     \
             'Application-Name': 'Illarion Launcher',     \
             'Application-Library-Allowable-Codebase': 'illarion.org',     \
             'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ssZ'),     \
             'Built-By': System.getProperty('user.name'),      \
             'Built-JDK': System.getProperty('java.version'),      \
             'Implementation-Title': 'Illarion Launcher',      \
             'Implementation-Vendor': 'Illarion e.V.',     \
             'Implementation-Version': project.ext.fullVersion
    }
}

task publishDownloaderBundle() {}

if (project.hasProperty('targetDistDir')) {
    publish.dependsOn {
        publishDownloader
    }
    publishDownloaderBundle.dependsOn {
        publishBundle
        //launch4j
        //publishMacBundle
    }
}

startScripts.dependsOn {
    jfxJar
}

cssToBin.enabled = false

javafx {
    id 'IllaLauncher'
    appID 'IllaLauncher'
    appName 'Illarion-Launcher'
    mainClass project.mainClassName

    embedLauncher = true

    category = 'Games'
    copyright = 'Copyright (c) 2013 Illarion e.V.'
    description = 'This is the downloader and launcher of Illarion.'
    licenseType = 'AGPLv3'
    vendor = 'Illarion e.V.'
    installSystemWide = false
    menu = true
    shortcut = true

    if (project.hasProperty('keyFile')) {
        apply from: project.keyFile
        releaseKey {
            alias = project.ext.storealias
            keyStore = project.ext.keystore
            storePass = project.ext.storepass
            storeType = project.ext.storetype
        }
        signingMode 'release'
    }
    packaging 'none'

    profiles {
        windows {
            javaRuntime = '<NO RUNTIME>'
        }
        macosx {
            javaRuntime = '<NO RUNTIME>'
        }
        linux {
            javaRuntime = '<NO RUNTIME>'
        }
    }

    width = 620
    height = 410
    embedJNLP = true
    codebase = 'http://illarion.org/media/java/launcher'
}

if (project.hasProperty('targetDistDir')) {
    /*launch4j {
        mainClassName = project.mainClassName
        icon = 'icons/windows.ico'
        outfile = new File(project.targetDistDir, "illarion.exe").absolutePath
        copyright = '2014 - Illarion e.V'
    }*/
    /*macAppBundle {
        mainClassName = project.mainClassName
        icon = 'icons/mac.icns'
        bundleJRE = false
        javaProperties.put("apple.laf.useScreenMenuBar", "true")
        jvmVersion = '1.7+'
        appName = "Illarion"
        dmgOutputDir = "macApp"
        dmgName = "illarion.app.zip"
    }*/

    task clearDistDir(type: Delete) {
        delete project.distsDir
    }
    jfxDeploy {
        doFirst {
            clearDistDir
        }
    }
    task publishDownloader(type: Copy, dependsOn: 'jfxDeploy') {
        from project.distsDir
        into file(project.targetDistDir)
    }
    task publishBundle(type: Copy, dependsOn: 'proguard') {
        from new File(project.buildDir, "illarion.jar").absolutePath
        into file(project.targetDistDir)
    }
    /*task publishMacBundle(type: Copy, dependsOn: 'createAppZip') {
        from new File(project.buildDir, "macApp/illarion.app.zip").absolutePath
        into file(project.targetDistDir)
    }*/
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: 'jfxJar') {
    final def mainFile = new File(project.buildDir, "libs/${project.archivesBaseName}-${project.version}.jar")
            .absolutePath
    injars(mainFile)
    configurations.runtime.each { File file ->
        if (file.absolutePath.startsWith(System.getProperty('java.home'))) {
            libraryjars file.absolutePath
        } else {
            def filter = "!META-INF/*,!META-INF/plexus/*,!META-INF/sisu/*,!META-INF/maven/**,!about.html,!LICENSE," +
                    "!OSGI-OPT/**,!**/packageinfo,!**.java,!xmlns/**"
            if (file.absolutePath.contains("xpp3")) {
                filter += ",!javax/xml/namespace/QName.class"
            }
            if (file.absolutePath.contains("javolution-core-java")) {
                filter += ",!org/osgi/**"
            }
            injars([filter: filter], file.absolutePath)
        }
    }

    libraryjars files("${System.getProperty('java.home')}/lib/jce.jar")
    libraryjars files("${System.getProperty('java.home')}/lib/rt.jar")

    outjars new File(project.buildDir, "illarion.jar").absolutePath

    /* Forcing all class files to contain the same codebase level. */
    target "1.7"

    /* Optimization settings */
    dontoptimize
    optimizationpasses 1
    allowaccessmodification
    mergeinterfacesaggressively

    /* Obfuscation settings */
    dontobfuscate

    renamesourcefileattribute "SourceFile"
    keepattributes "SourceFile,LineNumberTable"
    keepattributes "*Annotation*"

    keepclasseswithmembers "public class com.javafx.main.Main {" +
            "public static void main(java.lang.String[]);" +
            "}"

    keepclasseswithmembers "public class illarion.download.** {" +
            "public static void main(java.lang.String[]);" +
            "}"

    keepclasseswithmembernames "class * {" +
            "native <methods>;" +
            "}"

    keepclassmembers "class * extends java.lang.Enum {" +
            "public static **[] values();" +
            "public static ** valueOf(java.lang.String);" +
            "}"

    keepclassmembers "class * implements java.io.Serializable {" +
            "static final long serialVersionUID;" +
            "static final java.io.ObjectStreamField[] serialPersistentFields;" +
            "private void writeObject(java.io.ObjectOutputStream);" +
            "private void readObject(java.io.ObjectInputStream);" +
            "java.lang.Object writeReplace();" +
            "java.lang.Object readResolve();" +
            "}"

    keep "class ch.qos.logback.** { *; }"
    keep "class illarion.download.gui.controller.*"
    keep "class org.apache.commons.logging.impl.LogFactoryImpl"
    keep "class org.apache.commons.logging.impl.SimpleLog"
    keep "class org.xmlpull.mxp1.MXParserFactory"

    keepclassmembers "class illarion.download.** {" +
            "@javafx.fxml.FXML *;" +
            "}"

    keepclasseswithmembers "class * {" +
            "org.apache.commons.logging.Log getLog(java.lang.String);" +
            "}"

    dontwarn "javafx.embed.**"
    dontwarn "com.sun.**"
    dontwarn "javax.servlet.**"
    dontwarn "javax.mail.**"
    dontwarn "javax.jms.**"
    dontwarn "javax.xml.**"
    dontnote "javax.xml.**"
    dontnote "org.apache.log4j.jmx.Agent"
    dontnote "org.apache.log4j.net.ZeroConfSupport"
    dontnote "org.apache.log4j.spi.LocationInfo"
    dontwarn "org.apache.commons.**"
    dontwarn "org.apache.tools.ant.**"
    dontwarn "org.apache.axis.**"
    dontwarn "org.mantisbt.connect.ant.**"
    dontwarn "org.apache.maven.repository.internal.**"
    dontwarn "org.eclipse.aether.impl.**"
    dontwarn "org.eclipse.aether.internal.impl.**"
    dontwarn "org.eclipse.aether.connector.**"
    dontwarn "org.eclipse.aether.transport.**"
    dontwarn "org.osgi.service.**"
    dontwarn "org.slf4j.**"
    dontwarn "ch.qos.logback.**"
    dontwarn "org.codehaus.janino.**"
    dontwarn "org.apache.log4j.**"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url project.ext.mavenRepo
        }
    }
}